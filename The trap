Anyone using the baker scripts?
JavaScript

/*
8kun Formatting Tools
Version 2.0.0
    - Adds a toolbar above the commenting area containing most of 8kun's
formatting options
    - Press esc to close quick-reply window
    - Press c to go to catalog
    - Hover cursor over each button to show availiable shortcut
You can add your own toolbar items by modifying 'const formats', the basic
syntax is as follows:
  format_name: {
      displayText: 'string',
      altText: 'string',
tooltip,
      options: {
          prefix: 'string',
          suffic: 'string',
          multiline: true/false,
defaults to false
          exclusiveLine: true/false
its own line, defaults to false
      },
      edit: 'function'
pressed
      shortcutKey: 'string'
displays on the toolbar button,
optional, description for the mouseover
prepend to selection,
append to selection,
optional, can span across line breaks,
optional, the formatted text must be on
the function to execute when the button is
optional, assign keyboard shortcut
} */
(function () {
'use strict';
const CSS = `
/* generated by 8kun Formatting Tools */
.tf-toolbar {
  padding: 0px 5px 1px 5px;
}
.tf-toolbar :link {
  text-decoration: none;
}
.tf-toolbar a[data-format="bold"] {
  font-weight: bold;
}
.tf-toolbar a[data-format="italics"] {
  font-style: italic;
}
.tf-toolbar a[data-format="under"] {
  text-decoration underline;
}
.tf-toolbar a[data-format="code"] {
  font-family: "Courier New", Courier, monospace;
}
.tf-toolbar a[data-format="strike"] {
  text-decoration: line-through;
}
.tf-toolbar a[data-format="heading"] {
  color: #AF0A0F; font-weight: bold;
}
`;
const formats = {
  bold: {
    displayText: 'B',
    altText: 'bold',
    options: {
      prefix: "'''",
      suffix: "'''"
    },

  edit: function (box, options) {
    wrapSelection(box, options);
  },
  shortcutKey: 'b'
},
italics: {
  displayText: 'i',
  altText: 'italics',
  options: {
    prefix: "''",
    suffix: "''"
  },
  edit: function (box, options) {
    wrapSelection(box, options);
  },
  shortcutKey: 'i'
},
under: {
  displayText: 'U',
  altText: 'underline',
  options: {
    prefix: '__',
    suffix: '__'
  },
  edit: function (box, options) {
    wrapSelection(box, options);
  },
  shortcutKey: 'u'
},
spoiler: {
  displayText: 'spoiler',
  altText: 'mark as spoiler',
  options: {
    prefix: '[spoiler]',
    suffix: '[/spoiler]'
  },
  edit: function (box, options) {
    wrapSelection(box, options);
  },
  shortcutKey: 's'
},
code: {
  displayText: 'code',
  altText: 'code formatting',
  options: {
    prefix: '[code]',
    suffix: '[/code]',
    multiline: true
  },
  edit: function (box, options) {
    wrapSelection(box, options);
  }
}, strike: {
  displayText: 'strike',
  altText: 'strikethrough',
  options: {
    prefix: '~~',
    suffix: '~~'
  },
  edit: function (box, options) {
    wrapSelection(box, options);
  }
},

  heading: {
    displayText: 'heading',
    altText: 'redtext',
    options: {
      prefix: '==',
      suffix: '==',
      exclusiveLine: true
    },
    edit: function (box, options) {
      wrapSelection(box, options);
    }
} };
const $ = (selector, parent = document) => parent.querySelector(selector);
function initCSS() {
  if ($('style.generated-css')) {
    const styleElement = $('style.generated-css');
    styleElement.innerHTML += CSS;
  } else {
    const styleElement = document.createElement('style');
    styleElement.setAttribute('type', 'text/css');
    styleElement.id = '8kun_formatting_tools_css';
    styleElement.innerHTML = CSS;
    document.head.append(styleElement);
} }
function wrapSelection(box, options) {
  'use strict';
  if (box == null) {
return; }
  const {prefix, suffix, multiline = false, exclusiveLine = false} = options;
  // record scroll top to restore it later.
  const scrollTop = box.scrollTop;
  const selectionStart = box.selectionStart;
  const selectionEnd = box.selectionEnd;
  const breakSpace = ['\r', '\n'];
  const text = box.value;
  const emptyText = (selectionStart == selectionEnd);
  let beforeSelection = text.
